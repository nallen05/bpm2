
(defpackage :bpm2-test
  (:use :cl :bpm2))

(in-package :bpm2-test)

(defmacro m (macro-lambda-list &body body)
  "a LAMBDA that has a macro-lambda-list instead of an ordinary lambda-list"
  (let ((% (gensym "macro-lambda-list")))
    (if (and (stringp (first body))
	     (rest body))

	;; there is a doc string
	`(lambda (&rest ,%)
	   ,(first body)
	   (destructuring-bind ,macro-lambda-list ,%
	     ,@(rest body)))

	;; there is no doc string
	`(lambda (&rest ,%)
	   (destructuring-bind ,macro-lambda-list ,%
	     ,@body)))))

(defmacro f_ (&body body)
  "a LAMBDA that takes 1 argument: `_'"
  `(lambda (_) ,@body))

(defmacro testit (/form alt-//name &rest tests)
  `(progn ,@(mapcar (m ((in . out))
		      `(ptester:test ,out (funcall ,/form ,in)))
		    tests)
	  ,@(if alt-//name
		(mapcar (m ((in . out))
			  `(ptester:test ,out (,alt-//name ,@(rest /form)))
			  tests)))))
	 
;(testit (/lispp 'numberp)
;	//lispp
;	(5 . t)
;	("5" . nil))

; primitives

(progn
  (ptester:test t (funcall #1=(/lispp 'numberp) 5))
  (ptester:test nil (funcall #1# #\5)))

(progn
  (ptester:test t (//lispp 5 'numberp))
  (ptester:test nil (//lispp "5" 'numberp)))
	      